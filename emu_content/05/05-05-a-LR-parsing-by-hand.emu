|> section
    title_gr per Hand entwerfen
    title_en a LR parsing by hand
    number 5.5
    counter DefCtr
    counter ExoCtr
    |> div
        id link-to-toc
        |> a
            href ../vorlesungsskript.html

            Inhaltsverzeichnis
        |> a
            href 05-04-LL1-grammars.html

            &lt;&lt; Kapitel 5.4
    |> div
        id link-to-overview
        style text-align: end
        |> a
            href /

            zur Kursübersicht
        |> a
            href 05-05-b-Parser-in-Java.html

            Kapitel 5.5 &gt;&gt;
    |> div
        id rightSideWrapper
        |> div
            class content
            |> div
                class chapter
                |> div
                    class subChapter
                    |> h1
                        class hidden-title
                        |> span
                            class subChapterTitle

                            ::::ChapterCtr.::++SectionCtr
                            LR-Parser per Hand entwerfen
                    |> p

                        Betrachten wir die kontextfreie Grammatik $G$ für arithmetische Ausdrücke mit den
                        Variablen $x, y, z$ und strenger Klammerung über dem Alphabet
                        $\Sigma = \{x, y, z, (, ), +, *\}$:
                    \begin{align*}
                    S&amp;\rightarrow x \ |\ y\ |\ z \\
                    S&amp;\rightarrow (S+S) \\
                    S&amp;\rightarrow (S*S)
                    \end{align*}
                    |> p

                        Sie kann also $(x + (y*z))$ ableiten aber eben nicht $(x + y + z)$. Wie können wir nun einen
                        Parser für $G$ schreiben? Also einen Algorithmus, der ein Wort $w \in \Sigma^*$ nimmt und einen
                        Ableitungsbaum konstruiert (falls $w \in L(G)$)?
                        Wenn wir uns an das LL-Paradigma halten und eine Linksableitung bauen wollen, dann stoßen wir
                        schon ganz am Anfang auf ein Problem: wenn zum Beispiel
                    \begin{align*}
                    w = ((((\dots
                    \end{align*}
                    |> p

                        dann wissen wir nicht, ob wir als ersten Schritt $S \rightarrow (S+S)$ oder $S \rightarrow
                        (S*S)$ tätigen sollen. Das geht auch nicht, wenn wir $k$ Zeichen vorauslesen dürfen, weil
                        der $(((\dots$-Präfix ja länger als $k$ sein kann. Nein, wir müssen anders vorgehen.
                        Wir könnten beispielsweise die Grammatik ändern:
                    \begin{align*}
                    S&amp;\rightarrow x \ | \ y \ | \ z \\
                    S&amp;\rightarrow (SOS) \\
                    O&amp;\rightarrow + \ | \ *
                    \end{align*}
                    |> p

                        Das geht aber nicht immer:
                    |> div
                        id example-more-a-than-b
                        class well container theorem
                        |> p
                            |> span
                                class numbered-title

                                Beispiel 
                                |> NumberedTitle

                                    ::::ChapterCtr.::::SectionCtr.::++DefCtr
                                &ensp;
                            &ensp;Betrachten wir die recht einfache Sprache 
                        \begin{align*}
                        L_2 := \{a^{m+k} b^m c \ | \ m \geq 1, k \geq 0 \} \ ,
                        \end{align*}
                        |> p

                            also _beliebig viele $a$'s, gefolgt von gleich vielen oder weniger $b$'s (aber mindestens
                            einem), abgeschlossen
                            mit einem $c$
                            _. Eine
                            Grammatik ist schnell geschrieben:
                        \begin{align}
                        S&amp;\rightarrow aS \\
                        S&amp;\rightarrow Xc \\
                        X&amp;\rightarrow aXb \\
                        X&amp;\rightarrow ab
                        \end{align}
                        |> p

                            Wenn wir jetzt die ersten $k$ Zeichen lesen: $aaaa \dots$, dann
                            gibt es keinen Weg, zu entscheiden, ob danach gleich viele oder weniger
                            $b$'s folgen werden, ob wir also $S \rightarrow sS$ oder $S \rightarrow Xc$ anwenden sollen.
                            Das lässt sich auch nicht durch Umschreiben der Grammatik lösen. Wir müssen
                            lesen, bis wir ein $b$ sehen.
                    |> h2

                        Das LR-Paradigma
                    |> p

                        Wir brauchen einen Paradigmenwechsel. Das LL-Paradigma war ja, mit $S$ zu starten und,
                        geleitet von den nächsten $k$ Zeichen, zu entscheiden, welche Ableitungsregel als nächstes
                        anzuwenden ist. Hierbei haben wir immer versucht, für das am weitesten
                        links stehende Nichtterminal eine Regel zu finden. Wir beschreiben nun ein ganz anderes
                        Vorgehen: wir lesen das Eingabewort $v$ von links nach rechts, unterhalten also
                        einen _Stack_, auf dem ein Präfix $\gamma$ von $v$ liegt,
                        bis wir am rechten Ende die rechte Seite einer Produktionsregel erkennen - bis also
                        $\gamma = \alpha \beta$ und es eine Produktion $X \rightarrow \beta$ gibt. Dann ersetzen
                        wir $\alpha \beta$ durch $\alpha X$.
                        Unser Stack enthält nun keine Präfix von $v$ mehr, sondern eine Wortform $\gamma$.
                        Zusammen mit dem ungelesenen Teil $w$ des Eingabewortes ergibt das eine
                        Wortform $\gamma w$. Solange es eine Rechtsableitung
                        $S \Pets{} \gamma w \Pets{} v$ gibt, sind wir auf dem richtigen Weg.
                        Am Besten betrachten wir ein Beispiel für
                        $L_2 = \{a^{m+k} b^m c \ | \ m \geq 1, k \geq 0\}$. Die Farbe grau bedeutet
                        hier, dass wir das Eingabezeichen noch nicht gelesen haben.
                    |> figure
                        class centered-figure well container
                        |> a
                            data-slide prev
                            href #aaabbc-sprache
                            class left carousel-control-prev-icon
                            |> div
                                class carousel-nav-icon
                                |> img
                                    src ../img/carousel-prev-icon.svg
                        |> a
                            data-slide next
                            href #aaabbc-sprache
                            class right carousel-control-next-icon
                            |> div
                                class carousel-nav-icon
                                |> img
                                    src ../img/carousel-next-icon.svg
                        |> div
                            style display:inline-block
                            data-interval false
                            class carousel
                            id aaabbc-sprache
                            |> ol
                                class carousel-indicators
                                |> li
                                    class active
                                    data-slide-to 1
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 2
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 3
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 4
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 5
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 6
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 7
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 8
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 9
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 10
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 11
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 12
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 13
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 14
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 15
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 16
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 17
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 18
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 19
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 20
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 21
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 22
                                    data-target #aaabbc-sprache
                                |> li
                                    data-slide-to 23
                                    data-target #aaabbc-sprache
                            |> div
                                style display:inline-block
                                class carousel-inner
                                |> div
                                    class item active
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-01.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-02.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-03.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-04.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-05.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-06.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-07.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-08.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-09.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-10.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-11.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-12.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-13.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-14.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-15.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-16.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-17.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-18.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-19.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-20.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-21.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-22.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-first-example/aaaabbbc-example-01-23.svg
                    |> p

                        Betrachten wir noch ein Beispiel, nun für die etwas nützlichere Grammatik
                        der streng geklammerten arithmetischen Ausdrücke.
                    |> figure
                        class centered-figure well container
                        |> a
                            data-slide prev
                            href #arithm
                            class left carousel-control-prev-icon
                            |> div
                                class carousel-nav-icon
                                |> img
                                    src ../img/carousel-prev-icon.svg
                        |> a
                            data-slide next
                            href #arithm
                            class right carousel-control-next-icon
                            |> div
                                class carousel-nav-icon
                                |> img
                                    src ../img/carousel-next-icon.svg
                        |> div
                            style display:inline-block
                            data-interval false
                            class carousel
                            id arithm
                            |> ol
                                class carousel-indicators
                                |> li
                                    class active
                                    data-slide-to 1
                                    data-target #arithm
                                |> li
                                    data-slide-to 2
                                    data-target #arithm
                                |> li
                                    data-slide-to 3
                                    data-target #arithm
                                |> li
                                    data-slide-to 4
                                    data-target #arithm
                                |> li
                                    data-slide-to 5
                                    data-target #arithm
                                |> li
                                    data-slide-to 6
                                    data-target #arithm
                                |> li
                                    data-slide-to 7
                                    data-target #arithm
                                |> li
                                    data-slide-to 8
                                    data-target #arithm
                                |> li
                                    data-slide-to 9
                                    data-target #arithm
                                |> li
                                    data-slide-to 10
                                    data-target #arithm
                                |> li
                                    data-slide-to 11
                                    data-target #arithm
                                |> li
                                    data-slide-to 12
                                    data-target #arithm
                                |> li
                                    data-slide-to 13
                                    data-target #arithm
                                |> li
                                    data-slide-to 14
                                    data-target #arithm
                                |> li
                                    data-slide-to 15
                                    data-target #arithm
                                |> li
                                    data-slide-to 16
                                    data-target #arithm
                                |> li
                                    data-slide-to 17
                                    data-target #arithm
                                |> li
                                    data-slide-to 18
                                    data-target #arithm
                                |> li
                                    data-slide-to 19
                                    data-target #arithm
                                |> li
                                    data-slide-to 20
                                    data-target #arithm
                                |> li
                                    data-slide-to 21
                                    data-target #arithm
                                |> li
                                    data-slide-to 22
                                    data-target #arithm
                            |> div
                                style display:inline-block
                                class carousel-inner
                                |> div
                                    class item active
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-01.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-02.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-03.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-04.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-05.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-06.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-07.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-08.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-09.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-10.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-11.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-12.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-13.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-14.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-15.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-16.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-17.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-18.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-19.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-20.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-21.svg
                                |> div
                                    class item
                                    |> img
                                        style height:18em
                                        src ../img/context-free/LR/LR-arithmetic-example/arithmetic-example-01-22.svg
                    |> p

                        Wenn wir uns nun die Ableitung ansehen, die wir gefunden haben:
                    \begin{align*}
                    \texttt{S} \Step{}
                    \texttt{(S+S)} \Step{}
                    \texttt{(S+(S*S))} \Step{}
                    \texttt{(S+(S*z))} \Step{}
                    \texttt{(S+(y*z))} \Step{}
                    \texttt{(x+(y*z))}
                    \end{align*}
                    |> p

                        dann sehen wir, dass es sich um eine Rechtsableitung handelt. Daher der Name LR-Parsing: wir
                        beginnen links (daher das L) und suchen eine Rechtsableitung (daher das R), allerdings in
                        umgekehrter
                        Reihenfolge. Statt von $S$ ausgehend $w$ abzuleiten, also $S \Step{}^* w$, versuchen
                        wir $w$ zu $S$ zu _reduzieren_, also $w \Pets{}^* S$.
                        Allerdings ist das nicht immer so einfach: manchmal ist nicht auf den ersten Blick erkennbar,
                        welche Produktionsregel wir (rückwärts) anwenden sollen. Hier ein etwas konstruiertes Beispiel:
                    \begin{align*}
                    S&amp;\rightarrow XYz \\
                    X&amp;\rightarrow aXa \ | \ bXb \ | \ c \\
                    Y&amp;\rightarrow Ya \ | \ Yb \ | \ a \ | \ b
                    \end{align*}
                    |> p

                        Die erzeugte Sprache ist 
                    \begin{align*}
                    L(G) = \{vcv^Rwz \ | \ v, w \in \{a,b\}^* \}
                    \end{align*}
                    |> p

                        Betrachten wir das Eingabewort $acaba$. Wir schreiben nun immer
                        den bis jetzt gelesenen / geparsten Teil des Wortes, gefolgt von dem
                        ungelesen Teil in grau und dahinter
                        in Klammern ,
                        was wir als nächstes tun, also das nächste Zeichen lesen oder eine
                        Regel anwenden.
                    |> div
                        class container

                        \begin{align*}
                        &amp;\textcolor{darkgray}{acabaz} \tag{lesen} \\
                        &amp;a\textcolor{darkgray}{cabaz} \tag{lesen} \\
                        &amp;ac\textcolor{darkgray}{abaz} \tag{reduzieren per $X \rightarrow c$} \\
                        &amp;aX\textcolor{darkgray}{abaz} \tag{lesen} \\
                        &amp;aXa\textcolor{darkgray}{baz} \tag{reduzieren per $X \rightarrow aXa$} \\
                        &amp;X\textcolor{darkgray}{baz} \tag{lesen} \\
                        &amp;Xb\textcolor{darkgray}{baz} \tag{reduzieren per $Y \rightarrow b$} \\
                        &amp;XY\textcolor{darkgray}{az} \tag{lesen} \\
                        &amp;XYa\textcolor{darkgray}{z} \tag{reduzieren per $Y \rightarrow Ya$} \\
                        &amp;XY\textcolor{darkgray}{z} \tag{lesen} \\
                        &amp;XYz \tag{reduzieren per $S \rightarrow XYz$} \\
                        &amp;S \tag{fertig}
                        \end{align*}
                    |> p

                        Es stellen sich einige Fragen: woher wissen wir zum Beispiel bei
                        $XYa\textcolor{darkgray}{z}$, dass wir per $Y \rightarrow Ya$ reduzieren müssen
                        und nicht per $Y \rightarrow a$? Wir könnten ja auch auf
                        $XYa \Pets{} XYY$ reduzieren. Oder in Schritt 2, bei
                        $a\textcolor{darkgray}{cabaz}$. Da könnten wir ja
                        gleich $a \Pets{} Y$ reduzieren.
                    |> div
                        class well container theorem
                        |> p
                            |> span
                                class numbered-title

                                Beobachtung 
                                |> NumberedTitle

                                    ::::ChapterCtr.::::SectionCtr.::++DefCtr
                                &ensp;.
                            &ensp;Die Reduktion
                            $XYa \Pets{} XYY$ kann nicht richtig sein, weil $XYY$ nie als Präfix in einer
                            Rechtsableitung vorkommen kann. Genauer gesagt: es gibt kein $w \in \Sigma^*$, so dass
                        \begin{align*}
                        S \Step{}^* XYYw \Step{} XYaw
                        \end{align*}
                        |> p

                            eine Rechtsableitung ist.
                    |> p

                        Wenn wir Glück haben, gibt es immer höchstens eine Reduktionsregel
                        $\alpha \beta w \Pets{} \alpha X w$, so dass
                        $S \Step{}^* \alpha X w \Step{} \alpha \beta w$ in einer Rechtsableitung vorkommen kann.
                        Das hängt von der Grammatik ab. Aber selbst dann brauchen wir einen Algorithmus, der
                        uns sagen kann, ob $XYa \Pets{} XYY$ ein korrekter Reduktionsschritt ist. Dies scheint
                        komplexer, als $w \stackrel{?}{\in} L$ zu entscheiden, ist aber _einfacher_!
                    |> p

                        Ein zweites Problem ist, dass wir eben manchmal kein Glück haben und es mehrere
                        plausible Reduktionsschritte geben kann. Ein Beispiel wäre die obere Grammatik, leicht
                        abgewandelt:
                    \begin{align*}
                    S&amp;\rightarrow XY \tag{beachten Sie: oben hatten wir $S \rightarrow XYz$}\\
                    X&amp;\rightarrow aXa \ | \ bXb \ | \ c \\
                    Y&amp;\rightarrow Ya \ | \ Yb \ | \ a \ | \ b
                    \end{align*}
                    |> p

                        Wenn wir jetzt als einfaches Beispiel $cab$ ableiten wollen:
                    \begin{align*}
                    \textcolor{darkgray}{cab} \tag{lesen} \\
                    c\textcolor{darkgray}{ab} \tag{reduzieren per $X \rightarrow c$} \\
                    X\textcolor{darkgray}{ab} \tag{lesen} \\
                    Xa\textcolor{darkgray}{ab} \tag{reduzieren per $Y \rightarrow a$} \\
                    XY\textcolor{darkgray}{b} \tag{reduzieren per $Y \rightarrow a$}
                    \end{align*}
                    |> p

                        Jetzt liegt die Wortform $XY$ auf unserem Stack und wir haben zwei Möglichkeiten:
                        wir könnten reduzieren, also $XY \Pets{} S$, oder das nächste Zeichen lesen.
                        Ersteres wäre inkorrekt:
                    \begin{align*}
                    XY\textcolor{darkgray}{b} \Pets{} S \textcolor{darkgray}{b} \ ,
                    \end{align*}
                    |> p

                        wobei $Sb$ eben keine Wortform ist, die in einer Rechtsableitung vorkommen könnte.
                        Das wissen wir aber erst, wenn wir $b$ gelesen haben. Wäre das Eingabewort nämlich nur $ca$,
                        dann
                        wäre $XY \Pets{} S$ tatsächlich die korrekte Reduktion. In der ersten Grammatik
                        hatten wir als "Work-around" ein $z$ am Ende angehängt, um das Wortende zu erkennen.
                        Im Allgemeinen ist es aber leichter, dem Parser zu erlauben, das nächste Zeichen zu lesen.
                    |> p

                        All diese Gedanken theoretisch rigoros zu formulieren ist einigermaßen herausvordernd.
                        Daher werden wir erst einmal für eine Grammatik arithmetischer Ausdrücke einen
                        Parser in Java implementieren.